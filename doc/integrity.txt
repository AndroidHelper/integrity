Integrity
=========

As soon as you push your commits, Integrity builds your code, run your tests
and makes sure everything works fine. It then reports the build status using
various notifiers back to you and your team so everyone is on the same page
and problems can be fixed right away.

Check out Integrity watching itself:

image:screenshot.png[Screenshot]

Read more about about Continuous Integration on
http://martinfowler.com/articles/continuousIntegration.html[Martin Fowler's
website] and http://en.wikipedia.org/wiki/Continuous_Integration[Wikipedia].

== Installation
Make sure your system meet these prerequisites:

* Ruby >= 1.8.7 (1.8.7, 1.9.2, 1.9.3 and 2.0.0 should work)
* RubyGems >= 1.3.5
* git >= 1.6

Then grab Integrity via git, install its dependencies and create the database:
[source, shell]
$ gem install bundler
$ git clone git://github.com/integrity/integrity
$ cd integrity
$ git checkout -b deploy v26
$ bundle install
$ bundle exec rake db

To give it a quick try before going any further, run `bundle exec rackup` and
navigate to http://0.0.0.0:9292.

Upgrade:
[source, shell]
$ git fetch origin
$ git merge v26

== Configuration
Integrity is configured via the `local.rb` file using Ruby.
[source, shell]
$ cp local.rb.example local.rb

[source, ruby]
----
Integrity.configure do |c|
  c.database                    = "sqlite3:integrity.db"
  c.directory                   = "builds"
  c.base_url                    = "http://ci.example.org"
  c.log                         = "integrity.log"
  c.builder                     = :threaded, 5
  c.build_all                   = true
  c.project_default_build_count = 10
  c.notifiers                   = %w(Email)
end
----

=== Basic settings

database:: Any valid database URI supported by
http://datamapper.org/[DataMapper].
* `sqlite3:integrity.db`
* `mysql://user:password@localhost/integrity`
* `postgres://user:password@localhost/integrity`

IMPORTANT: You need to install the appropriate `data_objects` adapter as well.
The SQLite3 adapter (`do_sqlite3`) is installed by default.

directory:: This is where your projects' code will be checked out. Make sure it
is writable by the user who runs Integrity.

base_url:: Absolute URL to your Integrity instance, *without* a trailing slash.
This setting is optional but is required to have proper links in notifications.

log:: Path to the Integrity log file; mostly useful for troubleshooting

build_all!:: Tells Integrity to build every single commit it is notified about.
Only builds the newest otherwise.

auto_branch!:: Say the project _Integrity_ is tracking the master branch, and
I push my _build-duration_ topic branch to GitHub, Integrity will create and
build a new project named _Integrity (build-duration)_ using the same build
command and notifiers.

trim_branches:: When _Integrity_ is set to auto branch, it is possible for a
large number of stale branches to stick around which no longer exist. Turning
this on will automatically detect when a branch is deleted via the GitHub
post-receive hook and delete the build history for the branch.

project_default_build_count:: How many builds to initially show on project
pages. nil, which is the default, means show all builds.

notifiers:: List of enabled notifiers. See details above in Notification
section.

HTTP authentication:: If both `username` and `password` settings are set then
only the logged-in users can administer the projects and see the private ones.
[source, ruby]
----
c.username = "admin"
c.password = "password"
----

To protect the whole Integrity instance, set ADMIN_USERNAME and ADMIN_PASSWORD
environment variables before starting Integrity:
[source, bash]
----
export ADMIN_USERNAME=admin ADMIN_PASSWORD=secret
----

On Heroku:
[source, bash]
----
heroku config:add ADMIN_USERNAME=admin ADMIN_PASSWORD=secret
----

checkout_proc:: Set to a Proc instance to override default checkout mechanism.
For example, to use https://github.com/grahamc/git-cachecow[git-cachecow]
to cache repositories locally:
[source, ruby]
----
c.checkout_proc = Proc.new do |runner, repo_uri, branch, sha1, target_directory|
  runner.run! "git scclone #{repo_uri} #{target_directory} #{sha1}"
end
----

=== Building private repositories
Integrity will use keys configured in its environment for repository access.

The easiest option is to switch to the Unix user that Integrity runs under
and create an SSH key for this user:
[source, bash]
----
ssh-keygen
----

Save the key to the default location. Add the public key to the list of allowed
keys in the repository you wish to build. Clone the repository manually to
check that it works and trust the server's host key if necessary.

An alternative is to configure `GIT_SSH` environment variable. Integrity ships
with a sample `git_ssh` file in `doc` directory. Path to this file should
be placed in the `GIT_SSH` environment variable. You can do this on Heroku
by editing `init.rb` to include the following:
[source, ruby]
----
ENV['GIT_SSH'] = File.join(File.dirname(__FILE__), 'doc/git_ssh')
----

Then, specify a private key that is allowed by repository:
[source, bash]
----
heroku config:add GIT_PRIVATE_KEY="----contents of private key
second line of private key
make sure to use double quotes
to allow multi-line config var value
end of private key-----------"
----

WARNING: Storing secret data such as private keys in environment is inherently
         insecure. If you do this, restrict access to your Integrity
         installation to trusted users only.

=== Automating the builds
Integrity provides two HTTP endpoints to trigger new builds:

POST /:project/builds:: Causes Integrity to fetch the HEAD of the remote
repository and build it. Note that HTTP authentication applies to it if set.
This endpoint can't be disabled.

POST /github/:token:: Supports GitHub's
https://help.github.com/articles/post-receive-hooks[Post-Receive Hook]. Enable it:
[source, ruby]
----
c.github_token = "TOKEN"
----

POST /gitlab:: Supports GitLab's
https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/web_hooks/web_hooks.md[Push Web Hook].

=== Choosing a builder
Integrity ships with three ways of building your codes in the background.

==== Threaded
The +threaded+ builder pushes the build job to an in-memory queue and processes
them as soon as possible. It relies on Ruby's thread so it doesn't have any
dependency nor requires to run other processes.
[source, ruby]
c.builder = :threaded, 5

The second argument is the size of the thread pool.

NOTE: The threaded builder
      https://github.com/integrity/integrity/issues/156[cannot be used
      with Passenger].

==== Delayed::Job
The +dj+ builder queues up the builds into an SQL database using
https://github.com/tobi/delayed_job[Delayed::Job]. To use it, install its
dependencies by uncommenting the relevant lines in the `Gemfile` and run
`bundle lock && bundle install`.

[source, ruby]
c.builder = :dj, { :adapter => "sqlite3", :database => "dj.db" }

The second argument must be a valid
http://api.rubyonrails.org/classes/ActiveRecord/Base.html#method-c-establish_connection[ActiveRecord
connection hash].

Run a worker with `rake jobs:work`. See
https://github.com/tobi/delayed_job#readme[Delayed::Job's documentation]
for more details.

==== Resque
The +resque+ builder, as the name implies, uses
https://github.com/defunkt/resque[resque] to store jobs. Configure it:

[source, ruby]
c.builder = :resque

Then run a worker with `rake resque:work`.

Resque web backend is available at `/resque` path.

== Notification

After a build status is available, you want to know it **immediately**.
Integrity supports a number of notification mechanisms:

* AMQP
* http://campfirenow.com[Campfire]
* https://www.flowdock.com[Flowdock]
* Co-op
* Email
* HTTP
* Amazon SES
* Shell
* TCP

To enable and use a notifier with your projects:

1. Open the `Gemfile`, uncomment the relevant lines and run
   `bundle lock && bundle install` to install the notifier's dependencies.
2. Edit the `init.rb` file to enable it.
3. Restart Integrity and go to a project settings screen where you can
   enable and configure the notifier.

=== HTTP Notifier

This notifier sends an HTTP POST request to the specified URL. The payload is
sent as HTML form fields, with `application/x-www-form-urlencoded` content
type. The fields are as follows:

* `name`: project name
* `status`: build status string (success/failed)
* `url`: url to build page in Integrity
* `repo`: URI specified for repository in project configuration
* `branch`: branch specified in project configuration
* `commit`: SHA1 of the commit that was built
* `author`: Commit's author name (without email address)
* `message`: Commit message, prefixed with branch name

Example request body:

[source, txt]
----
name=My+Test+Project&status=success&url=http%3A%2F%2Fwww.example.com%2Fmy-test-project%2Fbuilds%2F1&repo=%2Ftmp%2Fi%2Ftmp%2Fmy_test_project&branch=master&commit=d669c99c26419806c80326e1b09eda378e65491d&author=John+Doe&message=master%3A+This+commit+will+work
----

== Deployment
=== http://modrails.com[Phusion Passenger]
Please see Passenger's documentation for
http://www.modrails.com/documentation/Users%20guide%20Apache.html[Apache] and
http://www.modrails.com/documentation/Users%20guide%20Nginx.html[Nginx].

NOTE: Currently ThreadedBuilder does not work with Passenger (issue
      https://github.com/integrity/integrity/issues/156[#156]).
      Please use DelayedBuilder or ResqueBuilder.

=== http://code.macournoyer.com/thin/[Thin]
1. Uncomment the `thin` line in the Gemfile
2. Run `bundle install` to install Thin

[source, shell]
$ $EDITOR doc/thin.yml
$ thin -C doc/thin.yml start

=== http://unicorn.bogomips.org/[Unicorn]
1. Uncomment the `unicorn` line in the Gemfile
2. Run `bundle install` to install Unicorn

[source, shell]
$ $EDITOR doc/unicorn.rb
$ unicorn -c doc/unicorn.rb -D

=== Reverse Proxy

You will want to run a reverse proxy such as Nginx or Apache in front of
Thin or Unicorn servers.

==== http://nginx.org/[Nginx]
Nginx can be configured as follows:

----
http {
  upstream builder-integrityapp-com {
  # thin or unicorn - first instance
  server 127.0.0.1:8910;
  # thin only - specify all remaining instances
  server 127.0.0.1:8911;
}

server {
  server_name builder.integrityapp.com;
  location / {
    proxy_pass http://builder-integrityapp-com;
  }
}
----

==== http://httpd.apache.org/[Apache]
Apache can be configured as follows:

----
<VirtualHost *:80>
        ServerName ci.example.org
        ServerAlias ci

        ProxyRequests Off
        ProxyPreserveHost On

        <Proxy *>
                Order allow,deny
                Allow from all
        </Proxy>

        ProxyPass / http://127.0.0.1:8910/
        ProxyPassReverse / http://127.0.0.1:8910/

        ProxyPassReverse / http://127.0.0.1:8911/
</VirtualHost>
----

If you wish Apache to serve static files:

----
<VirtualHost *:80>
        ServerName ci.example.org
        ServerAlias ci

        ProxyRequests Off
        ProxyPreserveHost On

        <Proxy *>
                Order allow,deny
                Allow from all
        </Proxy>

        DocumentRoot /path/to/integrity/lib/app/public
        RewriteEngine On
        RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} !-f
        RewriteRule ^/(.*)$ http://localhost:8910/$1 [P]
</VirtualHost>

<Directory /path/to/integrity/lib/app/public>
        Order allow,deny
        Allow from all
        Options None
        AllowOverride None
        
        # Apache 2.4+
        AuthType None
        Require all granted
</Directory>
----

=== Deleting Old Build Directories

You will want to run `rake cleanup` from cron on a regular basis to delete
old build directories.

== FAQ
=== Does it support Subversion or any other SCM?
[[faq-scm]]
Integrity only works with http://git-scm.org[git]. However, git can mirror
other SCMs, for example Subversion via git-svn, and Integrity will work with
such mirrored repositories. It is up to you to keep the mirrored repositories
up to date with your primary repositories.

=== But does it work with <insert tech here>?
[[faq-tech]]
**Absolutely!** As long as your build process can be run from an UNIX-y
environment and that it returns a *zero* status code for success and
*non-zero* for failure, then Integrity works for you.

== Support / Contributing
You can get in touch via IRC at irc://irc.freenode.net/integrity[#integrity on
freenode]. If no one happens to be around, you can ask our mailing list at
integrity@librelist.com. (http://librelist.com/browser/integrity/[Archives])

If you find a bug, or want to give us a feature request, log it into our
https://github.com/integrity/integrity/issues[bug tracker].

To start hacking, grab the code from our git repository at
`git://github.com/integrity/integrity.git` and setup the dependencies with
`bundle install && bundle lock`. Finally, hack and `bundle exec rake` as
usual ;-)

Once you're done, make sure your changes are rebased on on top of the `master`
branch and open a new ticket in our bug tracker to let us know where we can
pull from.

== Documentation

To build HTML documentation, run `rake html`. This is what goes on the
Integrity website (http://integrity.github.io).

Dependencies for HTML documentation generation:

* http://www.methods.co.nz/asciidoc/[asciidoc]
* http://www.gnu.org/software/src-highlite/[source-highlight]
